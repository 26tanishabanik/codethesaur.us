{
  "meta": {
    "language": "go",
    "language_version": "1.17.1",
    "language_name": "Golang"
  },
  "categories": {
    "Arithmetic Operators": [
      "addition",
      "addition_assignment",
      "subtraction",
      "subtraction_assignment",
      "multiplication",
      "multiplication_assignment",
      "division",
      "division_assignment",
      "modulus",
      "modulus_assignment",
      "increment",
      "decrement",
      "receive_operator",
      "short_variable_declaration"
    ],
    "Equality/Comparison Operators": [
      "equal_to",
      "not_equal_to",
      "less_than",
      "less_than_or_equal_to",
      "greater_than",
      "greater_than_or_equal_to"
    ],
    "Logical/Boolean/Bitwise Operators": [
      "and",
      "bitwise_and_assignment",
      "or",
      "not",
      "bitwise_xor",
      "bitwise_xor_assignment",
      "bitwise_or",
      "bitwise_inclusive_or_assignment",
      "and_not",
      "bitwise_not",
      "left_shift",
      "left_shift_assignment",
      "right_shift",
      "right_shift_assignment"
    ],
    "Conditional Operators": [
      "ternary"
    ]
  },
  "operators": {
    "addition": {
      "name": "Addition operator",
      "code": "op1 + op2"
    },
    "addition_assignment": {
      "name": "Addition and assignment operator",
      "code": "op += number"
    },
    "subtraction": {
      "name": "Subtraction operator",
      "code": "op1 - op2"
    },
    "subtraction_assignment": {
      "name": "Subtraction and assignment operator",
      "code": "op -= number"
    },
    "multiplication": {
      "name": "Multiplication operator",
      "code": "op1 * op2"
    },
    "multiplication_assignment": {
      "name": "Multiplication and assignment operator",
      "code": "op *= number"
    },
    "division": {
      "name": "Division operator",
      "code": "op1 / op2"
    },
    "division_assignment": {
      "name": "Division and assignment operator",
      "code": "op /= number"
    },
    "modulus": {
      "name": "Modulus (remainder) operator",
      "code": "op1 % op2"
    },
    "modulus_assignment": {
      "name": "Modulus and assignment operator",
      "code": "op %= number"
    },
    "increment": {
      "name": "Increment (add 1) operator",
      "code": "op++"
    },
    "decrement": {
      "name": "Decrement (subtract 1) operator",
      "code": "op--"
    },
    "exponential": {
      "not-implemented": "true",
      "code": ""
    },
    "factorial": {
      "not-implemented": "true",
      "code": ""
    },
    "absolute_value": {
      "not-implemented": "true",
      "code": ""
    },
    "percentage": {
      "not-implemented": "true",
      "code": ""
    },
    "receive_operator": {
      "name": "Receive Operator",
      "code": "var <- ch"
    },
    "short_variable_declaration": {
      "name": "Short Variable Declaration",
      "code": "var := val"
    },
    "equal_to": {
      "name": "Equality operator",
      "code": "op1 == op2"
    },
    "not_equal_to": {
      "name": "Not equal to operator",
      "code": "op1 != op2"
    },
    "less_than": {
      "name": "Less than operator",
      "code": "op1 < op2"
    },
    "less_than_or_equal_to": {
      "name": "Less than or equal to operator",
      "code": "op1 <= op2"
    },
    "greater_than": {
      "name": "Greater than operator",
      "code": "op1 > op2"
    },
    "greater_than_or_equal_to": {
      "name": "Greater than or equal to operator",
      "code": "op1 >= op2"
    },
    "null_coalescing": {
      "not-implemented": "true",
      "code": ""
    },
    "is": {
      "not-implemented": "true",
      "code": ""
    },
    "is_not": {
      "not-implemented": "true",
      "code": ""
    },
    "and": {
      "name": "Logical AND operator",
      "code": "condition1 && condition2"
    },
    "and_assignment": {
      "not-implemented": "true",
      "code": ""
    },
    "or": {
      "name": "Logical OR operator",
      "code": "condition1 || condition2"
    },
    "or_assignment": {
      "not-implemented": "true",
      "code": ""
    },
    "not": {
      "name": "Logical NOT operator",
      "code": "!condition"
    },
    "not_assignment": {
      "not-implemented": "true",
      "code": ""
    },
    "xor": {
      "not-implemented": "true",
      "code": ""
    },
    "xor_assignment": {
      "not-implemented": "true",
      "code": ""
    },
    "xnor": {
      "not-implemented": "true",
      "code": ""
    },
    "xnor_assignment": {
      "not-implemented": "true",
      "code": ""
    },
    "bitwise_xor":{
      "name": "Bitwise Exclusive OR",
      "code": "op1 ^ op2"
    },
    "bitwise_inclusive_or":{
      "name": "Bitwise Inclusive OR",
      "code": "op1 | op2"
    },
    "bitwise_xor_assignment":{
      "name": "Bitwise Exclusive OR Assignment",
      "code": "op ^= number"
    },
    "bitwise_inclusive_or_assignment":{
      "name": "Bitwise Inclusive OR Assignment",
      "code": "op |= number"
    },
    "and_not":{
      "name": "AND NOT",
      "code": "op1 &^ op2"
    },
    "bitwise_not":{
      "name": "Bitwise Complement",
      "code": "^op"
    },
    "left_shift": {
      "name": "Left shift bitwise operator",
      "code": "op << number of bits"
    },
    "left_shift_assignment": {
      "name": "Left shift assignment operator",
      "code": "op <<= number"
    },
    "right_shift": {
      "name": "Right shift bitwise operator",
      "code": "op >> number of bits"
    },
    "right_shift_assignment": {
      "name": "Right shift assignment operator",
      "code": "op >>= number"
    },
    "ternary": {
      "name": "Ternary operator",
      "code": "value1 if condition else value2 (?:)"
    },
    "null_forgiving": {
      "not-implemented": "true",
      "code": ""
    }
  }
}
